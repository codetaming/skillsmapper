#!/bin/bash

set -e
set -o nounset
set -o pipefail

SCRIPT_DIR=$(cd "$(dirname "$0")" ; pwd -P)

source "${SCRIPT_DIR}/auto.helpers"

goal_build() {
  go build ./cmd/skillsmapperd
}

goal_ko-build() {
    if ! [ -x "$(command -v ko)" ]; then
        GO111MODULE=on go get -mod=readonly github.com/google/ko/cmd/ko
    fi

    output=$(ko publish --local --preserve-import-paths --tags= ./cmd/skillsmapperd | tee)
    ref=$(echo $output | tail -n1)

    docker tag $ref $IMAGE
    if $PUSH_IMAGE; then
        docker push $IMAGE
    fi
}

goal_containerize() {
  ko publish ./cmd/skillsmapperd
}

goal_test-unit() {
  go test ./...
}

goal_run() {
  go run ./cmd/skillsmapperd.go
}

goal_test-e2e() {
  setup-newman
  run-newman
}

goal_deploy-cloudrun() {
  gcloud run deploy --image gcr.io/${PROJECT_ID}/ko/gcr.io/codetaming-skillsmapper/ko/skillsmapperd-c89e9d07d866ec9370a3f2eb76542a1b@sha256:8dc64722fa4c1e281cd76b377e3e6de502b664c5b1b31e9bcf0cc192f006cd76 --platform managed
}

goal_help() {
  echo "usage: $0 <goal>
    goal:
    build                    -- Build the deployable artifacts
    ko-build                 -- Build the deployable artifacts with ko
    containerize             -- Build the docker container for the app
    test-unit                -- Run unit tests
    test-e2e                 -- Run newman tests
    deploy-cloudrun          -- Deploy to Cloud Run
    "
  exit 1
}

main() {
  TARGET=${1:-}
  if [ -n "${TARGET}" ] && type -t "goal_$TARGET" &>/dev/null; then
    "goal_$TARGET" "${@:2}"
  else
    goal_help
  fi
}

main "$@"